#+title: stack-vm.c
#+author: Aryadev Chavali
#+description: A simple assembler and interpreter for a stack based bytecode VM
#+date: 2023-09-16

A simple implementation of a stack based virtual machine that
assembles and interprets custom byte code, in C11.

 I don't support Windows necessarily
but I think it should be possible to build and run this using MinGW or
something as I'm not doing anything particularly Posix specific (yet).
+But honestly, why are you using Windows anyway?+

* Build instructions
Have ~make~ installed pretty please.  I'm using ~gcc~ but ~clang~ does
work as well so go crazy (edit [[file:Makefile::CC=gcc][here]] to
change the compiler).

For everything do:
#+begin_src sh
make all
#+end_src

The assembler, interpreter and unit tests are their own binaries so
you could just build the one you want specifically.
#+begin_src sh
make interpreter.out
make assembler.out
make test.out
#+end_src
* How to use
=assembler.out=: Takes two inputs:
+ File name for assembly code
+ File name for output bytecode
Then it attempts to assemble the input file given.  It does produce
errors so lookout for them.

=interpreter.out=: Takes one input:
+ File name for bytecode file
It attempts to execute the bytecode at the file given on a fresh
virtual machine instance.  Also produces errors.

=test.out=: Takes no input.  Runs unit tests.  Look for ~#define
VERBOSE_LOGS N~ and set it to 1 to produce more verbose logs.
* Tasks
** TODO Write a better in memory assembler
[[file:src/vm.c::void vm_write_program(vm_t *vm, FILE *fp)]]

We need something a bit more robust
** TODO [0%] Write tests for parser
[[file:tests/test-parser.c]]
*** TODO Complete test_parse_line
+ Test whitespace inclusion
[[file:tests/test-parser.c::bool test_parse_line(void)]]
*** TODO Test parse_i64
[[file:src/parser.c::perr_t parse_i64(buffer_t *buf, i64 *ret)]]
*** TODO Test parse_buffer
[[file:src/parser.c::perr_t parse_buffer(buffer_t *buf, op_t **instructions,]]
** TODO [0%] Write tests for virtual machine implementation
In particular the assembler and interpreter routines.
[[file:tests/test-vm.c]]
*** TODO Test vm_print_all
*** TODO Test vm_execute
*** TODO Test vm_execute_all
*** TODO Test vm_copy_program
*** TODO Test vm_write_program
*** TODO Test vm_read_program
